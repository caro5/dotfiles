#!/usr/bin/env perl

=head1 NAME

    git-branch-cleanup - remove local or remote dead branches

=head1 SYNOPSIS

    git-branch-cleanup [options] [remote ...]

     Options:
       --all                  Delete all non-blacklisted branches, non-interactively.
       --blacklist            Add the next string in the command-line to the blacklist.
                                  Contains 'master' and 'HEAD' no matter what.
       --dry_run|-n           Do not execute removal commands, just print what would have been done.
       --help|-?              This help message.
       --interactive          Interactively approve the branch to be deleted.
                                  Turned on by default.
       --matching_local_only  Only delete remote branches that match local branches.
       --merged [br]          Only delete branches that have been merged into upstream/master.
                                  Turned on by default. Optional argument to say which branch
                                  should be compared with.
       --regex <re>           Only delete branches that match this regular expression.
       --remotes|-r           Do this on the selected remotes.
                                  Defaults to origin.
       --remotes_only         Don't process the local branches.
       --unmerged             Allow it to delete unmerged branches.
                                  Turned off by default.
       --verbose              Print extra information.

=cut


use warnings;
use strict;

use Getopt::Long;
use Pod::Usage qw/pod2usage/;

our @BLACKLIST = qw/master HEAD develop/;
our %WHITELIST;
our $GIT_BRANCH_COMMAND = 'git branch';
our $MERGED_ONLY = '--merged upstream/master';  # since this is filled in, only remove merged branches.
our @REMOTES = q{origin};

our($comparison_branch, $do_remotes, $dry_run, $interactive, $regex, $remotes_only, $verbose);
our $matching_local = 0;
$comparison_branch = 'upstream/master';
$interactive = 1;

GetOptions(
           'all'                  => sub { $interactive = 0; },
           'blacklist=s@'         => \@BLACKLIST,
           'dry_run|n'            => \$dry_run,
           'help|?'               => sub { pod2usage(); },
           'interactive'          => \$interactive,
           'matching_local_only'  => \$matching_local,
           'merged:s'             => sub {
                                         my($opt_name, $branch) = @_;
                                         $comparison_branch = $branch || $comparison_branch;
                                         $MERGED_ONLY = qq{--merged $comparison_branch};
                                     },
           'regex=s'              => \$regex,
           'remotes'              => \$do_remotes,
           'remotes_only'         => sub { $remotes_only = 1; $do_remotes = 1; },
           'unmerged'             => sub { $MERGED_ONLY = '' },
           'verbose'              => \$verbose,
);

if( $dry_run ){
    $interactive = 0;
}

if($comparison_branch =~ m{.*/(.*)}){
    push @BLACKLIST, $1 unless $1 eq 'master';
}
else {
    push @BLACKLIST, $comparison_branch;
}

if($matching_local) {
    my $output = `git branch`;
    my @whitelist = split /\s+/, $output;
    @WHITELIST{@whitelist} = (1) x @whitelist;
    print join(',', keys(%WHITELIST)), "\n";
}

our $BLACKLIST = '^(?:' . join('|', map {"\Q$_\E"} @BLACKLIST) . ')$';
$BLACKLIST = qr{$BLACKLIST};
if( @ARGV ){
    @REMOTES = @ARGV;
}

unless( $remotes_only ){
    process_branches();
}

our %REMOTES;
if( $do_remotes ) {
    foreach my $remote (@REMOTES){
        print "git fetch $remote\n";
        `git fetch $remote`;
        $REMOTES{$remote}++;
    }

    process_branches('doing_remote: true');
}

exit 0;


sub process_branches {
    my($doing_remote) = @_;

    my $git_branch_command = 'git branch ' . $MERGED_ONLY;
    if( $doing_remote ){
        $git_branch_command = 'git branch -r ' . $MERGED_ONLY;
    }

    print "Executing '$git_branch_command' to get list of branches to process\n" if $verbose;

    open BRANCHES_FH, "$git_branch_command |" or die "Couldn't open '$git_branch_command': $!";

    my $branch;
    while( $branch = <BRANCHES_FH> ){
        $branch =~ s/\A\s+|\s+\z//g;

        if( $doing_remote and $branch =~ m{^([^/]+)/(\S+)} ){
            my($remote, $branch) = ($1, $2);
            next unless $REMOTES{$remote};
            process_branch($branch, $remote);
        }
        else {
            process_branch($branch);
        }
    }
    close BRANCHES_FH;
}

sub process_branch {
    my($branch, $remote) = @_;

    print "Processing branch $branch\n" if $verbose;

    if( $branch =~ /^\s*\*/ ){
        print "Skipping the current branch $branch\n" if $verbose;
        return;
    }
    elsif( $BLACKLIST and $branch =~ $BLACKLIST ){
        print "Skipping blacklisted branch: $branch\n" if $verbose;
        return;
    }
    elsif( $regex and $branch !~ m{$regex} ){
        print "Skipping regex miss: $branch\n" if $verbose;
        return;
    }
    elsif( %WHITELIST and not $WHITELIST{$branch}) {
        print "Skipping $branch as it is not in the whitelist\n" if $verbose;
        return;
    }

    if( $interactive ){
        if( $remote ){
            print "Delete branch '$remote/$branch'? [Y/n/q] ";
        }
        else {
            print "Delete branch '$branch'? [Y/n/q] ";
        }
        my $input = <STDIN>;
        exit 0 if $input =~ /^\s*q/i;
        return if $input =~ /^\s*n/i;
    }

    print "Would have run: " if $dry_run;
    if( $remote ){
        print "git push $remote :$branch\n" if $verbose or $dry_run;
        system("git push $remote :$branch") unless $dry_run;
    }
    else {
        print "git branch -D $branch\n" if $verbose or $dry_run;
        system("git branch -D $branch") unless $dry_run;
    }
}
